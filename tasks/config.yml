---

- name: get api key
  shell: grep apikey ~/.config/syncthing/config.xml | sed -n 's:.*<apikey>\(.*\)</apikey>.*:\1:p'
  register: syncthing_apikey_raw
  changed_when: false
  become: yes
  become_user: "{{ role_syncthing_user }}"

- name: set syncthing_apikey
  set_fact:
    syncthing_apikey: "{{ syncthing_apikey_raw.stdout }}"

- name: get system config
  uri:
    url: "http://{{role_syncthing_api}}/rest/system/config"
    return_content: yes
    headers:
      X-API-Key: "{{syncthing_apikey}}"
  register: syncthing_config_raw
  check_mode: no

- name: set syncthing_(config,config_old,myID)
  set_fact:
    syncthing_config: "{{ syncthing_config_raw.content | from_json }}"
    syncthing_config_old: "{{ syncthing_config_raw.content | from_json }}"
    syncthing_myID: "{{ syncthing_config_raw.x_syncthing_id }}"
    syncthing_config_deviceID: ""
    syncthing_config_devices: ""

- name: Create directories
  file:
    path:   '{{ item.path }}'
    state:  '{{ item.state  | default("directory") }}'
    owner:  '{{ role_syncthing_user }}'
    group:  '{{ item.group  | default("root") }}'
    mode:   '{{ item.mode   | default("0755") }}'
  with_items: "{{ role_syncthing_data.folders }}"
  when: (item.path|d() and
        (inventory_hostname in item.inventory_hosts)
        {% if item.devices_del is defined %}
          {% for i in item.devices_del %}
            and ( "{{ syncthing_myID }}" not in "{{ i }}" )
          {% endfor %}
        {% endif %} )

- name: Make lists deviceID
  set_fact:
    syncthing_config_deviceID: "{{ lookup('template', 'lookup/syncthing_config_deviceID.j2') | from_yaml }}"
  with_items: "{{ role_syncthing_data.folders }}"
  when: (item.path|d() and
        (inventory_hostname in item.inventory_hosts)
        {% if item.devices_del is defined %}
          {% for i in item.devices_del %}
            and ( "{{ syncthing_myID }}" not in "{{ i }}" )
          {% endfor %}
        {% endif %} )

- name: Make folders
  set_fact:
    syncthing_config: "{ {{ lookup('template', 'lookup/syncthing_config_folders.j2') }} }"
  with_items: "{{ role_syncthing_data.folders }}"
  when: item.path|d()

- name: Read all activ deviceID
  set_fact:
    syncthing_devices: "{{ lookup('template', 'lookup/syncthing_devices.j2') | from_yaml | unique }}"

- name: Make activ deviceID
  set_fact:
    syncthing_config: "{ {{ lookup('template', 'lookup/syncthing_deviceID.j2') }} }"
  with_items: "{{ syncthing_devices }}"

- name: post config
  uri:
    url: "http://{{role_syncthing_api}}/rest/system/config"
    method: POST
    return_content: yes
    headers:
      Content-Type: "application/json"
      X-API-Key: "{{syncthing_config.gui.apiKey}}"
    body: "{{ syncthing_config | to_json }}"
    body_format: "json"
  when: syncthing_config != syncthing_config_old

- name: syncthing restart
  uri:
    url: "http://{{role_syncthing_api}}/rest/system/restart"
    method: POST
    return_content: yes
    headers:
      X-API-Key: "{{syncthing_config.gui.apiKey}}"
  when: syncthing_config != syncthing_config_old

## vim: foldmethod=marker:tabstop=2:shiftwidth=2:softtabstop=2
